// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model HSLColour {
  id         Int @id
  hue        Int
  saturation Int
  lightness  Int

  dominantId  ImageColours[] @relation("dominant")
  secondaryId ImageColours[] @relation("secondary")
  tertiaryId  ImageColours[] @relation("tertiary")

  @@unique([hue, saturation, lightness])
}

model ImageColours {
  colourID Int @id

  dominantID  Int
  secondaryID Int
  tertiaryID  Int

  image    Image?
  dominant HSLColour @relation(name: "dominant", fields: [dominantID], references: [id])

  secondary HSLColour @relation(name: "secondary", fields: [secondaryID], references: [id])
  tertiary  HSLColour @relation(name: "tertiary", fields: [tertiaryID], references: [id])
}

model Image {
  url     String       @id
  colours ImageColours @relation(fields: [imageColoursID], references: [colourID])

  profilePictureUser   User @relation(fields: [profilePictureUserID], references: [id])
  profilePictureUserID Int  @unique

  societyPicture   Society @relation(fields: [societyPictureID], references: [id])
  societyPictureID Int     @unique

  eventPicture   Event @relation(fields: [eventPictureID], references: [id])
  eventPictureID Int   @unique
  imageColoursID Int   @unique
}

model User {
  id             Int       @id @default(autoincrement())
  username       String    @unique
  email          String    @unique
  password       String
  salt           String
  dateJoined     DateTime
  profilePicture Image?
  societies      Society[] @relation(name: "membertosociety")
  keywords       Keyword[]
  adminsocieties Society[]
  events         Event[]
}

model Society {
  id             Int     @id @default(autoincrement())
  admin          User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         Int
  name           String  @unique
  events         Event[]
  description    String?
  members        User[]  @relation(name: "membertosociety")
  discordId      String? @unique
  societyPicture Image?
}

model Event {
  id            Int       @id @default(autoincrement())
  picture       Image?
  name          String
  startDateTime DateTime
  endDateTime   DateTime
  location      String
  description   String
  societyId     Int
  society       Society   @relation(fields: [societyId], references: [id], onDelete: Cascade)
  keywords      Keyword[]
  attendees     User[]

  @@unique(name: "eventID", [societyId, name, startDateTime, endDateTime])
}

model Keyword {
  id          Int     @id @default(autoincrement())
  text        String  @unique
  subscribers User[]
  events      Event[]
}
